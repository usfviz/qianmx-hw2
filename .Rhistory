"Year","Life.Expectancy")
colnames(tfrt_long) <- c("Country.Name","Country.Code",
"Year","Fertility.Rate")
colnames(pop_long) <- c("Country.Name","Country.Code",
"Year","Population")
df <- merge(le_long,tfrt_long)
df <- merge(df,pop_long)
df1 <- merge(df,metadata[c("Country.Code","Region")])
df2 <- na.omit(df1)
df2 <- df2[which(df2$Region != ''),]
# add a column of index and opacity
df2$id <- 1:nrow(df2)
df2$Opacity <- 0.1
# for country hover
all_values <- function(x) {
if(is.null(x)) return(NULL)
row <- data[data$id == x$id, ]
paste(row$Country.Name)
}
# select useful columns
df2$Year <- as.numeric(df2$Year)
# fillna
df2[is.na(df2)] <- 0
print(source('app_final.R')$value)
library(shiny); print(source('app_final.R')$value)
#Library
if (!require("reshape2")) {install.packages("reshape2")}
if (!require("shiny")) {install.packages("shiny")}
if (!require("plotly")) {install.packages("plotly")}
if (!require("varhandle")) {install.packages("varhandle")}
if (!require("ggvis")) {install.packages("ggvis")}
# load data
le <-read.csv(text=readLines('API_SP.DYN.LE00.IN_DS2_en_csv_v2.csv')[-(1:4)],check.names=FALSE, stringsAsFactors = FALSE)
tfrt <-read.csv(text=readLines('API_SP.DYN.TFRT.IN_DS2_en_csv_v2.csv')[-(1:4)],check.names=FALSE, stringsAsFactors = FALSE)
pop <- read.csv(text=readLines('API_SP.POP.1564.TO.ZS_DS2_en_csv_v2.csv')[-(1:4)],check.names=FALSE,stringsAsFactors = FALSE)
metadata <- read.csv('Metadata_Country_API_SP.DYN.LE00.IN_DS2_en_csv_v2.csv')
# drop useless columns
le <- le[,-(3:4),drop=FALSE]
tfrt <- tfrt[,-(3:4),drop=FALSE]
pop <- pop[,-(3:4),drop=FALSE]
# wide to long
le_long <- melt(le, id.vars = c("Country Name","Country Code"))
tfrt_long <- melt(tfrt, id.vars = c("Country Name","Country Code"))
pop_long <- melt(pop, id.vars = c("Country Name","Country Code"))
# change colum names and left join
colnames(le_long) <- c("Country.Name","Country.Code",
"Year","Life.Expectancy")
colnames(tfrt_long) <- c("Country.Name","Country.Code",
"Year","Fertility.Rate")
colnames(pop_long) <- c("Country.Name","Country.Code",
"Year","Population")
df <- merge(le_long,tfrt_long)
df <- merge(df,pop_long)
df1 <- merge(df,metadata[c("Country.Code","Region")])
df2 <- na.omit(df1)
df2 <- df2[which(df2$Region != ''),]
# add a column of index and opacity
df2$id <- 1:nrow(df2)
df2$Opacity <- 0.1
# for country hover
all_values <- function(x) {
if(is.null(x)) return(NULL)
row <- data[data$id == x$id, ]
paste(row$Country.Name)
}
# select useful columns
df2$Year <- as.numeric(df2$Year)
# fillna
df2[is.na(df2)] <- 0
View(df2)
#Library
if (!require("reshape2")) {install.packages("reshape2")}
if (!require("shiny")) {install.packages("shiny")}
if (!require("plotly")) {install.packages("plotly")}
if (!require("varhandle")) {install.packages("varhandle")}
if (!require("ggvis")) {install.packages("ggvis")}
# load data
le <-read.csv(text=readLines('API_SP.DYN.LE00.IN_DS2_en_csv_v2.csv')[-(1:4)],check.names=FALSE, stringsAsFactors = FALSE)
tfrt <-read.csv(text=readLines('API_SP.DYN.TFRT.IN_DS2_en_csv_v2.csv')[-(1:4)],check.names=FALSE, stringsAsFactors = FALSE)
pop <- read.csv(text=readLines('API_SP.POP.1564.TO.ZS_DS2_en_csv_v2.csv')[-(1:4)],check.names=FALSE,stringsAsFactors = FALSE)
metadata <- read.csv('Metadata_Country_API_SP.DYN.LE00.IN_DS2_en_csv_v2.csv')
# drop useless columns
le <- le[,-(3:4),drop=FALSE]
tfrt <- tfrt[,-(3:4),drop=FALSE]
pop <- pop[,-(3:4),drop=FALSE]
# wide to long
le_long <- melt(le, id.vars = c("Country Name","Country Code"))
tfrt_long <- melt(tfrt, id.vars = c("Country Name","Country Code"))
pop_long <- melt(pop, id.vars = c("Country Name","Country Code"))
# change colum names and left join
colnames(le_long) <- c("Country.Name","Country.Code",
"Year","Life.Expectancy")
colnames(tfrt_long) <- c("Country.Name","Country.Code",
"Year","Fertility.Rate")
colnames(pop_long) <- c("Country.Name","Country.Code",
"Year","Population")
df <- merge(le_long,tfrt_long)
df <- merge(df,pop_long)
df1 <- merge(df,metadata[c("Country.Code","Region")])
df2 <- na.omit(df1)
df2 <- df2[which(df2$Region != ''),]
# add a column of index and opacity
df2$id <- 1:nrow(df2)
df2$Opacity <- 0.1
# for country hover
all_values <- function(x) {
if(is.null(x)) return(NULL)
row <- data[data$id == x$id, ]
paste(row$Country.Name)
}
# select useful columns
df2$Year <- as.integer(as.character(df2$Year))
# fillna
df2[is.na(df2)] <- 0
View(df2)
print(source('app_final.R')$value)
library(shiny); print(source('app_final.R')$value)
#Library
if (!require("reshape2")) {install.packages("reshape2")}
if (!require("shiny")) {install.packages("shiny")}
if (!require("plotly")) {install.packages("plotly")}
if (!require("varhandle")) {install.packages("varhandle")}
if (!require("ggvis")) {install.packages("ggvis")}
# load data
le <-read.csv(text=readLines('API_SP.DYN.LE00.IN_DS2_en_csv_v2.csv')[-(1:4)],check.names=FALSE, stringsAsFactors = FALSE)
tfrt <-read.csv(text=readLines('API_SP.DYN.TFRT.IN_DS2_en_csv_v2.csv')[-(1:4)],check.names=FALSE, stringsAsFactors = FALSE)
pop <- read.csv(text=readLines('API_SP.POP.1564.TO.ZS_DS2_en_csv_v2.csv')[-(1:4)],check.names=FALSE,stringsAsFactors = FALSE)
metadata <- read.csv('Metadata_Country_API_SP.DYN.LE00.IN_DS2_en_csv_v2.csv')
# drop useless columns
le <- le[,-(3:4),drop=FALSE]
tfrt <- tfrt[,-(3:4),drop=FALSE]
pop <- pop[,-(3:4),drop=FALSE]
# wide to long
le_long <- melt(le, id.vars = c("Country Name","Country Code"))
tfrt_long <- melt(tfrt, id.vars = c("Country Name","Country Code"))
pop_long <- melt(pop, id.vars = c("Country Name","Country Code"))
# change colum names and left join
colnames(le_long) <- c("Country.Name","Country.Code",
"Year","Life.Expectancy")
colnames(tfrt_long) <- c("Country.Name","Country.Code",
"Year","Fertility.Rate")
colnames(pop_long) <- c("Country.Name","Country.Code",
"Year","Population")
df <- merge(le_long,tfrt_long)
df <- merge(df,pop_long)
df1 <- merge(df,metadata[c("Country.Code","Region")])
df2 <- na.omit(df1)
df2 <- df2[which(df2$Region != ''),]
# add a column of index and opacity
df2$id <- 1:nrow(df2)
df2$Opacity <- 0.1
# for country hover
all_values <- function(x) {
if(is.null(x)) return(NULL)
row <- data[data$id == x$id, ]
paste(row$Country.Name)
}
# select useful columns
df2$Year <- as.integer(as.character(df2$Year))
# fillna
df2[is.na(df2)] <- 0
View(df2)
setwd("~/Desktop/linchenanalytics-hw2-master")
library(shiny)
library(ggvis)
library(reshape2)
library(dplyr)
#=============================================
# Data processing and functions
# life expectancy
life.expectancy <- read.csv('API_SP.DYN.LE00.IN_DS2_en_csv_v2.csv', header = 5, skip = 4)
life.expectancy <- life.expectancy[, c(1:2, 5:(ncol(life.expectancy)-3))]
life.expectancy <- melt(life.expectancy, id.vars = colnames(life.expectancy)[1:2])
colnames(life.expectancy) <- c('Country.Name', 'Country.Code', 'Year', 'Life.Expectancy')
# fertility rate
fertility.rate <- read.csv('API_SP.DYN.TFRT.IN_DS2_en_csv_v2.csv', header = 5, skip = 4)
fertility.rate <- fertility.rate[, c(1:2, 5:(ncol(fertility.rate)-3))]
fertility.rate <- melt(fertility.rate, id.vars = colnames(fertility.rate)[1:2])
colnames(fertility.rate) <- c('Country.Name', 'Country.Code', 'Year', 'Fertility.Rate')
# country metadata
country <- read.csv('Metadata_Country_API_SP.DYN.TFRT.IN_DS2_en_csv_v2.csv', header = 1)[, 1:2]
country <- country[country$Region != "",]
country$Region <- factor(country$Region)
# population metadata
population <- read.csv('API_SP.POP.TOTL_DS2_en_csv_v2_clean.csv', header = 1)
population <- population[, c(2, 5:(ncol(population)-2))]
population <- melt(population, id.vars = 'Country.Code')
colnames(population) <- c('Country.Code', 'Year', 'Population')
# merge all data into the same table
data <- merge(life.expectancy, fertility.rate, by = c('Country.Name', 'Country.Code', 'Year'))
data <- merge(data, country, by = 'Country.Code')
data <- merge(data, population, by = c('Country.Code', 'Year'))
# fill na
data[is.na(data)] <- 0
# convert Year to number
data$Year <- as.integer(as.character(substring(data$Year, 2)))
# add a column of index and opacity
data$id <- 1:nrow(data)
data$Opacity <- 0.1
# for country hover
country_hover <- function(x) {
if(is.null(x)) return(NULL)
row <- data[data$id == x$id, ]
paste(row$Country.Name)
}
View(data)
View(df2)
View(data)
data.apply(class,1)
apply(class,data,1)
apply(class,data,2)
?apply
#Library
if (!require("reshape2")) {install.packages("reshape2")}
if (!require("shiny")) {install.packages("shiny")}
if (!require("plotly")) {install.packages("plotly")}
if (!require("varhandle")) {install.packages("varhandle")}
if (!require("ggvis")) {install.packages("ggvis")}
# load data
le <-read.csv(text=readLines('API_SP.DYN.LE00.IN_DS2_en_csv_v2.csv')[-(1:4)],check.names=FALSE, stringsAsFactors = FALSE)
tfrt <-read.csv(text=readLines('API_SP.DYN.TFRT.IN_DS2_en_csv_v2.csv')[-(1:4)],check.names=FALSE, stringsAsFactors = FALSE)
pop <- read.csv(text=readLines('API_SP.POP.1564.TO.ZS_DS2_en_csv_v2.csv')[-(1:4)],check.names=FALSE,stringsAsFactors = FALSE)
metadata <- read.csv('Metadata_Country_API_SP.DYN.LE00.IN_DS2_en_csv_v2.csv')
# drop useless columns
le <- le[,-(3:4),drop=FALSE]
tfrt <- tfrt[,-(3:4),drop=FALSE]
pop <- pop[,-(3:4),drop=FALSE]
# wide to long
le_long <- melt(le, id.vars = c("Country Name","Country Code"))
tfrt_long <- melt(tfrt, id.vars = c("Country Name","Country Code"))
pop_long <- melt(pop, id.vars = c("Country Name","Country Code"))
# change colum names and left join
colnames(le_long) <- c("Country.Name","Country.Code",
"Year","Life.Expectancy")
colnames(tfrt_long) <- c("Country.Name","Country.Code",
"Year","Fertility.Rate")
colnames(pop_long) <- c("Country.Name","Country.Code",
"Year","Population")
df <- merge(le_long,tfrt_long)
df <- merge(df,pop_long)
df1 <- merge(df,metadata[c("Country.Code","Region")])
df2 <- na.omit(df1)
df2 <- df2[which(df2$Region != ''),]
# add a column of index and opacity
df2$id <- 1:nrow(df2)
df2$Opacity <- 0.1
# for country hover
all_values <- function(x) {
if(is.null(x)) return(NULL)
row <- data[data$id == x$id, ]
paste(row$Country.Name)
}
# select useful columns
df2$Year <- as.integer(as.character(df2$Year))
# fillna
df2[is.na(df2)] <- 0
library(shiny)
library(ggvis)
library(reshape2)
library(dplyr)
#=============================================
# Data processing and functions
# life expectancy
life.expectancy <- read.csv('API_SP.DYN.LE00.IN_DS2_en_csv_v2.csv', header = 5, skip = 4)
life.expectancy <- life.expectancy[, c(1:2, 5:(ncol(life.expectancy)-3))]
life.expectancy <- melt(life.expectancy, id.vars = colnames(life.expectancy)[1:2])
colnames(life.expectancy) <- c('Country.Name', 'Country.Code', 'Year', 'Life.Expectancy')
# fertility rate
fertility.rate <- read.csv('API_SP.DYN.TFRT.IN_DS2_en_csv_v2.csv', header = 5, skip = 4)
fertility.rate <- fertility.rate[, c(1:2, 5:(ncol(fertility.rate)-3))]
fertility.rate <- melt(fertility.rate, id.vars = colnames(fertility.rate)[1:2])
colnames(fertility.rate) <- c('Country.Name', 'Country.Code', 'Year', 'Fertility.Rate')
# country metadata
country <- read.csv('Metadata_Country_API_SP.DYN.TFRT.IN_DS2_en_csv_v2.csv', header = 1)[, 1:2]
country <- country[country$Region != "",]
country$Region <- factor(country$Region)
# population metadata
population <- read.csv('API_SP.POP.TOTL_DS2_en_csv_v2_clean.csv', header = 1)
population <- population[, c(2, 5:(ncol(population)-2))]
population <- melt(population, id.vars = 'Country.Code')
colnames(population) <- c('Country.Code', 'Year', 'Population')
# merge all data into the same table
data <- merge(life.expectancy, fertility.rate, by = c('Country.Name', 'Country.Code', 'Year'))
data <- merge(data, country, by = 'Country.Code')
data <- merge(data, population, by = c('Country.Code', 'Year'))
# fill na
data[is.na(data)] <- 0
# convert Year to number
data$Year <- as.integer(as.character(substring(data$Year, 2)))
# add a column of index and opacity
data$id <- 1:nrow(data)
data$Opacity <- 0.1
# for country hover
country_hover <- function(x) {
if(is.null(x)) return(NULL)
row <- data[data$id == x$id, ]
paste(row$Country.Name)
}
View(data)
runApp()
setwd("~/Desktop/Visualization/hw/hw2")
#Library
if (!require("reshape2")) {install.packages("reshape2")}
if (!require("shiny")) {install.packages("shiny")}
if (!require("plotly")) {install.packages("plotly")}
if (!require("varhandle")) {install.packages("varhandle")}
if (!require("ggvis")) {install.packages("ggvis")}
# load data
le <-read.csv(text=readLines('API_SP.DYN.LE00.IN_DS2_en_csv_v2.csv')[-(1:4)],check.names=FALSE, stringsAsFactors = FALSE)
tfrt <-read.csv(text=readLines('API_SP.DYN.TFRT.IN_DS2_en_csv_v2.csv')[-(1:4)],check.names=FALSE, stringsAsFactors = FALSE)
pop <- read.csv(text=readLines('API_SP.POP.1564.TO.ZS_DS2_en_csv_v2.csv')[-(1:4)],check.names=FALSE,stringsAsFactors = FALSE)
metadata <- read.csv('Metadata_Country_API_SP.DYN.LE00.IN_DS2_en_csv_v2.csv')
# drop useless columns
le <- le[,-(3:4),drop=FALSE]
tfrt <- tfrt[,-(3:4),drop=FALSE]
pop <- pop[,-(3:4),drop=FALSE]
# wide to long
le_long <- melt(le, id.vars = c("Country Name","Country Code"))
tfrt_long <- melt(tfrt, id.vars = c("Country Name","Country Code"))
pop_long <- melt(pop, id.vars = c("Country Name","Country Code"))
# change colum names and left join
colnames(le_long) <- c("Country.Name","Country.Code",
"Year","Life.Expectancy")
colnames(tfrt_long) <- c("Country.Name","Country.Code",
"Year","Fertility.Rate")
colnames(pop_long) <- c("Country.Name","Country.Code",
"Year","Population")
df <- merge(le_long,tfrt_long)
df <- merge(df,pop_long)
df1 <- merge(df,metadata[c("Country.Code","Region")])
df2 <- na.omit(df1)
df2 <- df2[which(df2$Region != ''),]
# add a column of index and opacity
df2$id <- 1:nrow(df2)
df2$Opacity <- 0.1
# for country hover
all_values <- function(x) {
if(is.null(x)) return(NULL)
row <- data[data$id == x$id, ]
paste(row$Country.Name)
}
# select useful columns
df2$Year <- as.integer(as.character(df2$Year))
# fillna
df2[is.na(df2)] <- 0
# =============================================Shiny=============================================
# UI
ui <- fluidPage(
headerPanel('HW2_MaxineQian'),
sidebarPanel(
radioButtons("region", "Region",
c("All" = "All",
"East Asia & Pacific" = "East Asia & Pacific",
"Europe & Central Asia" = "Europe & Central Asia",
"Latin America & Caribbean" = "Latin America & Caribbean",
"Middle East & North Africa" = "Middle East & North Africa",
"North America" = "North America",
"South Asia" = "South Asia",
"Sub-Saharan Africa" = "Sub-Saharan Africa")
),
position = 'right'
),
sidebarPanel(
sliderInput("year",
"Year",
min = 1960,
max = 2014,
value = 1,
animate = animationOptions(interval = 300)),
position = 'left'
),
mainPanel(
uiOutput("ggvis_ui"),
ggvisOutput("ggvis")
)
)
#=============================================
# Server
server <- function(input, output) {
yearData <- reactive({
data2 <- df2
if(input$region == 'All') data2$Opacity <- 0.7
else{
data2$Opacity[data2$Region == input$region] <- 0.7
}
# filter year and select data
df <-
data2 %>% filter(Year == input$year) %>%
select(Country.Name, Fertility.Rate, Life.Expectancy,
Region, Population, id, Opacity) %>%
arrange(Region)
return(df)
})
yearData %>%
ggvis(~Life.Expectancy, ~Fertility.Rate, size := ~Population / 500000, key := ~id, fill = ~Region,
fillOpacity := ~Opacity, fillOpacity.hover := 0.5) %>%
add_tooltip(country_hover, "hover") %>%
layer_points(fill = ~Region) %>%
add_axis("x", title = 'Life expectancy', orient = "bottom") %>%
add_axis("y", title = 'Fertility rate', orient = "left") %>%
scale_numeric("x", domain = c(20, 90), nice = T, clamp = F) %>%
scale_numeric("y", domain = c(1, 9), nice = T, clamp = F) %>%
bind_shiny("ggvis")
}
shinyApp(ui = ui, server = server)
library(shiny); print(source('~/Desktop/Visualization/hw/qianmx-hw2/app_final.R')$value)
print(source('~/Desktop/Visualization/hw/qianmx-hw2/app_final.R')$value)
print(source('~/Desktop/Visualization/hw/qianmx-hw2/app_final.R')$value)
library(shiny); print(source('~/Desktop/Visualization/hw/qianmx-hw2/app_final.R')$value)
print(source('~/Desktop/Visualization/hw/qianmx-hw2/app_final.R')$value)
print(source('~/Desktop/Visualization/hw/qianmx-hw2/app_final.R')$value)
setwd("~/Desktop/linchenanalytics-hw2-master")
library(shiny)
library(ggvis)
library(reshape2)
library(dplyr)
#=============================================
# Data processing and functions
# life expectancy
life.expectancy <- read.csv('API_SP.DYN.LE00.IN_DS2_en_csv_v2.csv', header = 5, skip = 4)
life.expectancy <- life.expectancy[, c(1:2, 5:(ncol(life.expectancy)-3))]
life.expectancy <- melt(life.expectancy, id.vars = colnames(life.expectancy)[1:2])
colnames(life.expectancy) <- c('Country.Name', 'Country.Code', 'Year', 'Life.Expectancy')
# fertility rate
fertility.rate <- read.csv('API_SP.DYN.TFRT.IN_DS2_en_csv_v2.csv', header = 5, skip = 4)
fertility.rate <- fertility.rate[, c(1:2, 5:(ncol(fertility.rate)-3))]
fertility.rate <- melt(fertility.rate, id.vars = colnames(fertility.rate)[1:2])
colnames(fertility.rate) <- c('Country.Name', 'Country.Code', 'Year', 'Fertility.Rate')
# country metadata
country <- read.csv('Metadata_Country_API_SP.DYN.TFRT.IN_DS2_en_csv_v2.csv', header = 1)[, 1:2]
country <- country[country$Region != "",]
country$Region <- factor(country$Region)
# population metadata
population <- read.csv('API_SP.POP.TOTL_DS2_en_csv_v2_clean.csv', header = 1)
population <- population[, c(2, 5:(ncol(population)-2))]
population <- melt(population, id.vars = 'Country.Code')
colnames(population) <- c('Country.Code', 'Year', 'Population')
# merge all data into the same table
data <- merge(life.expectancy, fertility.rate, by = c('Country.Name', 'Country.Code', 'Year'))
data <- merge(data, country, by = 'Country.Code')
data <- merge(data, population, by = c('Country.Code', 'Year'))
# fill na
data[is.na(data)] <- 0
# convert Year to number
data$Year <- as.integer(as.character(substring(data$Year, 2)))
# add a column of index and opacity
data$id <- 1:nrow(data)
data$Opacity <- 0.1
# for country hover
country_hover <- function(x) {
if(is.null(x)) return(NULL)
row <- data[data$id == x$id, ]
paste(row$Country.Name)
}
library(shiny)
library(ggvis)
library(reshape2)
library(dplyr)
#=============================================
# Data processing and functions
# life expectancy
life.expectancy <- read.csv('API_SP.DYN.LE00.IN_DS2_en_csv_v2.csv', header = 5, skip = 4)
life.expectancy <- life.expectancy[, c(1:2, 5:(ncol(life.expectancy)-3))]
life.expectancy <- melt(life.expectancy, id.vars = colnames(life.expectancy)[1:2])
colnames(life.expectancy) <- c('Country.Name', 'Country.Code', 'Year', 'Life.Expectancy')
# fertility rate
fertility.rate <- read.csv('API_SP.DYN.TFRT.IN_DS2_en_csv_v2.csv', header = 5, skip = 4)
fertility.rate <- fertility.rate[, c(1:2, 5:(ncol(fertility.rate)-3))]
fertility.rate <- melt(fertility.rate, id.vars = colnames(fertility.rate)[1:2])
colnames(fertility.rate) <- c('Country.Name', 'Country.Code', 'Year', 'Fertility.Rate')
# country metadata
country <- read.csv('Metadata_Country_API_SP.DYN.TFRT.IN_DS2_en_csv_v2.csv', header = 1)[, 1:2]
country <- country[country$Region != "",]
country$Region <- factor(country$Region)
# population metadata
population <- read.csv('API_SP.POP.TOTL_DS2_en_csv_v2_clean.csv', header = 1)
population <- population[, c(2, 5:(ncol(population)-2))]
population <- melt(population, id.vars = 'Country.Code')
colnames(population) <- c('Country.Code', 'Year', 'Population')
# merge all data into the same table
data <- merge(life.expectancy, fertility.rate, by = c('Country.Name', 'Country.Code', 'Year'))
data <- merge(data, country, by = 'Country.Code')
data <- merge(data, population, by = c('Country.Code', 'Year'))
# fill na
data[is.na(data)] <- 0
# convert Year to number
data$Year <- as.integer(as.character(substring(data$Year, 2)))
# add a column of index and opacity
data$id <- 1:nrow(data)
data$Opacity <- 0.1
# for country hover
country_hover <- function(x) {
if(is.null(x)) return(NULL)
row <- data[data$id == x$id, ]
paste(row$Country.Name)
}
write.table('cleaned.csv')
write.table(data,'cleaned.csv')
write.csv(data,'cleaned.csv')
setwd("~/Desktop/Visualization/hw/qianmx-hw2")
library(shiny); print(source('app_final.R')$value)
library(shiny); print(source('app_final.R')$value)
setwd("~/Desktop/linchenanalytics-hw2-master")
shiny::runApp()
setwd("~/Desktop/Visualization/hw/qianmx-hw2")
print(source('app_final.R')$value)
setwd("~/Desktop/Visualization/hw/qianmx-hw2")
library(shiny); print(source('app_final.R')$value)
print(source('app_final.R')$value)
library(shiny); print(source('app_final.R')$value)
library(shiny); print(source('app_final.R')$value)
print(source('app_final.R')$value)
